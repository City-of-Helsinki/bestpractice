(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{WDsB:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return c}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk");var a=n("SAVP"),r=n("TjRS");n("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/best-practices/coding-standards.md"}});var s={_frontmatter:i},l=r.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(l,o({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"coding-standards"},"Coding standards"),Object(a.b)("h2",{id:"backend-code-standards"},"Backend code standards"),Object(a.b)("h3",{id:"python-conventions"},"Python conventions"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Newer projects use ",Object(a.b)("a",o({parentName:"li"},{href:"https://github.com/ambv/black"}),"black")," for Python code formatting. We follow the basic config, without any modifications. It should be required for new projects and is warmly welcome for the old ones."),Object(a.b)("li",{parentName:"ul"},"We also use ",Object(a.b)("a",o({parentName:"li"},{href:"https://github.com/timothycrosley/isort"}),"isort")," for keeping all the imports nice and clean. To make it compatible with black add the following line either to your project's setup.cfg file's ",Object(a.b)("inlineCode",{parentName:"li"},"[isort]")," section or to isort.cfg: ")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"bash multi_line_output=3 \ninclude_trailing_comma=True \nforce_grid_wrap=0 \nuse_parentheses=True \nline_length=88\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Ensure that ",Object(a.b)("a",o({parentName:"li"},{href:"https://www.python.org/dev/peps/pep-0008/"}),"PEP-8 standards")," are upheld with the help of ",Object(a.b)("a",o({parentName:"li"},{href:"http://flake8.pycqa.org/en/latest/"}),"flake8"),".")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Write ",Object(a.b)("a",o({parentName:"p"},{href:"https://speakerdeck.com/pyconslides/transforming-code-into-beautiful-idiomatic-python-by-raymond-hettinger-1"}),"Pythonic code"),",\nnot ",Object(a.b)("a",o({parentName:"p"},{href:"https://www.youtube.com/watch?v=wf-BqAjZb8M"}),"Java (< 5) with pep8")),Object(a.b)("p",{parentName:"li"},"Not"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",o({parentName:"pre"},{className:"language-python"}),"colors = ['red', 'green', 'blue']\nfor i in range(len(colors)):\n    print(colors[i])\n")),Object(a.b)("p",{parentName:"li"},"but"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",o({parentName:"pre"},{className:"language-python"}),"for color in colors:\n  print(color)\n")),Object(a.b)("p",{parentName:"li"},"(CC-BY-SA Raymond Hettinger)")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Make ",Object(a.b)("a",o({parentName:"p"},{href:"https://docs.pytest.org/en/latest/"}),"pytest")," tests,\nand run tests against latest released Python 3. Run tests with deprecation warnings on.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use ",Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/pyenv/pyenv"}),"pyenv")," to install up to date (or older!) Python versions not available in your distribution repos")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use ",Object(a.b)("inlineCode",{parentName:"p"},"pyenv virtualenv")," (or ",Object(a.b)("inlineCode",{parentName:"p"},"python -m venv")," if not using pyenv) for creating virtualenvs, not ",Object(a.b)("inlineCode",{parentName:"p"},"virtualenv")," or other alternatives when using virtual environments in scripts.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Do not use print unless you really specifically want to print to stdout\n(for example with a cli tool).\nWrite status, error, debug etc. messages using the logging module.\nThis allows a main program using the code from elsewhere to configure\nthe logging target (to stderr, file, syslog, or logging server).\nDo not use the warnings module.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Prepare the project for distribution in the same way as the\n",Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/pypa/sampleproject"}),"pypa sampleproject"),":\nWrite a setup.py, setup.cfg, README.md,\nLICENSE (in most cases the MIT license)\nand .travis.yml files,\ncreate a directory for tests (named ",Object(a.b)("inlineCode",{parentName:"p"},"tests"),"),\n",Object(a.b)("em",{parentName:"p"},"but")," make a top level directories for the actual package code\nnamed ",Object(a.b)("inlineCode",{parentName:"p"},"src"),", ",Object(a.b)("em",{parentName:"p"},"not")," ",Object(a.b)("a",o({parentName:"p"},{href:"https://blog.ionelmc.ro/2014/05/25/python-packaging/#the-structure"}),"the same as the package"),".\nIn case the project is not a reusable part of a bigger application,\nbut a standalone app requiring a more complex installation\n(like a Django project requiring a database setup etc.),\nyou can skip the setup.py setup.cfg.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use static typing for functions instead of comments.\nThat way IDEs can give better info, and we can do some static checking (so the type info will not get stale, unlike comments)."),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Not like this:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",o({parentName:"pre"},{className:"language-python"}),'def func_with_docstring(foo, bar):\n    """Return the baz of foo and bar\n\n    Args:\n        foo: int\n        bar: float\n    Returns:\n        float\n    """\n    return bar/foo\n')),Object(a.b)("p",{parentName:"li"},"But like this:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",o({parentName:"pre"},{className:"language-python"}),'def func_with_typing(foo: int, bar: float) -> float:\n    """Return the baz of foo and bar"""\n    return bar/foo\n'))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use mypy for checking")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use your editor tooling (for example PyCharm can benefit from types)")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Check\n",Object(a.b)("a",o({parentName:"p"},{href:"https://www.python.org/dev/peps/pep-3107/"}),"PEP 3107")," (function annotations),\n",Object(a.b)("a",o({parentName:"p"},{href:"https://www.python.org/dev/peps/pep-0484/"}),"PEP 484")," (defined format for annotations + comment annotations) and\n",Object(a.b)("a",o({parentName:"p"},{href:"https://www.python.org/dev/peps/pep-0526/"}),"PEP 526")," (syntax for variable annotations)")))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use a doctest to illustrate use and also run the doctests\n(again, so that they won't get stale).")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use the ",Object(a.b)("a",o({parentName:"p"},{href:"https://docs.python.org/3/library/secrets.html"}),"secrets module")," for cryptographic needs, not the ",Object(a.b)("inlineCode",{parentName:"p"},"random")," module")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Use whitelists for reading ",Object(a.b)("inlineCode",{parentName:"p"},"POST")," data to avoid ",Object(a.b)("a",o({parentName:"p"},{href:"https://coffeeonthekeyboard.com/mass-assignment-security-part-10-855/"}),"mass assignment problems"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Do not use truthiness to check for existence, since values like None, False, 0, and '' will fail the check."),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Use ",Object(a.b)("inlineCode",{parentName:"li"},"is not None")," or ",Object(a.b)("inlineCode",{parentName:"li"},"not in iterable_instance")," and so on, as appropriate"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Do not use assert for normal runtime checks (for example to validate incoming data)\nas they will be disabled with debug off (in cpython). Use plain ifs and then raise assertions explicitly"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Testing uses the assert as syntax sugar, which is fine. You don't run tests in production."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Do not use tuples as placeholder for lists you think will not change.\nTuples are semantically limited in length, lists inherently might be of different length even if\nin one particular case they aren't."),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Compare the concepts of coordinates (always ",Object(a.b)("inlineCode",{parentName:"li"},"(x, y)"),", ",Object(a.b)("inlineCode",{parentName:"li"},"(x, y, z)")," etc.) to a list of Django plugins.\nCoordinates never have different length, that would simply be a different data type,\nbut different Django projects have different length of plugin lists even if ",Object(a.b)("em",{parentName:"li"},"your")," app's doesn't change."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Django database settings should have timeout to handle Kubernets services being down")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"check that imagemagick isn't used"))),Object(a.b)("h2",{id:"frontend-code-standards"},"Frontend code standards"),Object(a.b)("p",null,"Use yarn and webpack, not bower or grunt. Additional webpack modules need to go through architecture review."),Object(a.b)("p",null,"Do not include node","_","modules in source. If you need to build something custom, build it properly\nso that any (sub)dependencies do not get locked.\nIf you need to patch upstream versions, make PRs upstream and document the related PR to\nthe repo so that the hacked version can be changed back to the official one later."),Object(a.b)("p",null,"For React, use Redux as the store, redux-actions and redux-promise, saga or thunk. Separate API HTTP calls to a separate module/file."),Object(a.b)("h3",{id:"reactjsx-style-guide"},"React/JSX style guide"),Object(a.b)("p",null,"We follow ",Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/airbnb/javascript/blob/master/react/README.md"}),"Airbnb's style guide for React/JSX")," with few exceptions which are listed below. Use eslint with airbnb style guide."),Object(a.b)("p",null,"The main difference between Helsinki and Airbnb style guides is in the file structure."),Object(a.b)("h3",{id:"folder-structure"},"Folder structure"),Object(a.b)("p",null,"It is recommended to ",Object(a.b)("a",o({parentName:"p"},{href:"https://reactjs.org/docs/faq-structure.html"}),"structure")," projects so that files are grouped together by feature or route."),Object(a.b)("p",null,"If file count in a folder starts to get out of hand, it might be better to create subfolders for that folder (check ",Object(a.b)("inlineCode",{parentName:"p"},"product/")," in the image below). Then again you should avoid having ",Object(a.b)("a",o({parentName:"p"},{href:"https://reactjs.org/docs/faq-structure.html#avoid-too-much-nesting"}),"too much nesting"),"."),Object(a.b)("p",null,'There is no "right" answer here so it is up to you to find the folder structure that works best for the project. As projects grow larger, it might be necessary to rearrange files into a different folder structure. So choosing the “right” one, in the beginning, isn’t very important.'),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"footer/\n  Footer.jsx\n  Footer.test.jsx\n  footer.css\nuser/\n  UserProfile.jsx\n  userProfile.css\n  UserList.jsx\n  userList.css\n  utils.js \nproduct/\n  page/\n    ProductPage.jsx\n    ProductPage.test.jsx\n    productPage.css\n  list/\n    ProductList.jsx\n    ProductList.test.jsx\n    productList.css\n  create/\n    CreateProduct.jsx\n    CreateProduct.test.jsx\n    createProduct.css\n  edit/\n    EditProduct.jsx\n    EditProduct.test.jsx\n    editProduct.css\nhome/\n  home.jsx\n  home.css\n")),Object(a.b)("h4",{id:"separating-domain-and-common-files"},"Separating domain and common files"),Object(a.b)("p",null,"This section is based on DDD (",Object(a.b)("a",o({parentName:"p"},{href:"https://techbeacon.com/app-dev-testing/get-your-feet-wet-domain-driven-design-3-guiding-principles"}),"Domain driven design"),")"),Object(a.b)("p",null,"The idea is that we should divide project files between ",Object(a.b)("inlineCode",{parentName:"p"},"/domain")," and ",Object(a.b)("inlineCode",{parentName:"p"},"/common")," -folders."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Domain"),": Domain files are the project specific files that are tied to the projects business logic."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Common"),": Common files are the files that aren't tied to the projects business logic. Basically, you could share these files between projects, and even maybe make them as npm packages. Though, this is not a requirement for a common file."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{}),"common/\n  utils/\n    APITools.js\n  button/\n    Button.tsx\n    button.css\n  form/\n    textField/\n      TextField.tsx\n      textField.css\n    radio/\n      Radio.tsx\n      radio.css\n\ndomain/\n  product/\n    list/\n      ProductList.tsx\n      productList.css\n    page/\n      ProductPage.tsx\n      productPage.css\n    productHelpers.ts\n  user/\n    UserPage.tsx\n    userPage.css\n  home/\n    Home.tsx\n    home.css\n")),Object(a.b)("h3",{id:"naming"},"Naming"),Object(a.b)("p",null,"Airbnb style guide has root component name as folder name and the folder has ",Object(a.b)("inlineCode",{parentName:"p"},"index.jsx")," file. This makes it possible to import the root component by just writing the folder name into import path. This is not something Helsinki style guide recommends."),Object(a.b)("p",null,"Example below shows the main difference between Helsinki and Airbnb when importing ",Object(a.b)("em",{parentName:"p"},"components"),":"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-javascript"}),"// Airbnb way\nimport Footer from './Footer';\n// Helsinki way\nimport Footer from './footer/Footer';\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Extensions"),": Use .jsx or .tsx extension for React components depending on if you use TypeScript or not. eslint: ",Object(a.b)("a",o({parentName:"li"},{href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md"}),"react/jsx-filename-extension")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Filenames"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Use PascalCase for ",Object(a.b)("em",{parentName:"li"},"component")," and ",Object(a.b)("em",{parentName:"li"},"component test")," filenames. E.g., ",Object(a.b)("inlineCode",{parentName:"li"},"ReservationCard.jsx"),", ",Object(a.b)("inlineCode",{parentName:"li"},"ReservationCard.test.jsx"),"."),Object(a.b)("li",{parentName:"ul"},"Use camelCase for ",Object(a.b)("em",{parentName:"li"},"style")," filenames. E.g., ",Object(a.b)("inlineCode",{parentName:"li"},"reservationCard.css"),", ",Object(a.b)("inlineCode",{parentName:"li"},"reservationCard.less"),"."),Object(a.b)("li",{parentName:"ul"},"Use camelCase for ",Object(a.b)("em",{parentName:"li"},"jsx")," and ",Object(a.b)("em",{parentName:"li"},".tsx")," files that are not component files. E.g., ",Object(a.b)("inlineCode",{parentName:"li"},"index.jsx"),", ",Object(a.b)("inlineCode",{parentName:"li"},"helper.jsx"),", ",Object(a.b)("inlineCode",{parentName:"li"},"apiTools.jsx")))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Folder name"),": Use camelCase for folder names. E.g., ",Object(a.b)("inlineCode",{parentName:"li"},"./reservationCard"),", ",Object(a.b)("inlineCode",{parentName:"li"},"./footer"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Folder structure"),": Group folders by features. More detailed documentation ",Object(a.b)("a",o({parentName:"li"},{href:"frontend-folder-structure.md"}),"here"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Reference Naming"),": Use PascalCase for React components and camelCase for their instances. eslint: ",Object(a.b)("a",o({parentName:"li"},{href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md"}),"react/jsx-pascal-case"))),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"// bad\nimport reservationCard from './reservationCard/ReservationCard';\n\n// good\nimport ReservationCard from './reservationCard/ReservationCard';\n\n// bad\nconst ReservationItem = <Reservation />;\n\n// good\nconst reservationItem = <Reservation />;\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Component Naming"),": Use the filename as the component name. For example, ",Object(a.b)("inlineCode",{parentName:"li"},"ReservationCard.jsx")," should have a reference name of ",Object(a.b)("em",{parentName:"li"},"ReservationCard"),". Folder name should in most cases be the camelCase version of the component name ",Object(a.b)("em",{parentName:"li"},"reservationCard"),". Even though in some cases the folder name might be something more generic than the component name itself.")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-javascript"}),"// bad\nimport Footer from './Footer/Footer';\n\n// bad\nimport Footer from './Footer/index';\n\n// bad\nimport Footer from './Footer';\n\n// good\nimport Footer from './footer/Footer';\n")),Object(a.b)("h3",{id:"general-syntactic-guides"},"General syntactic guides"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Promises"),": Try to use await/async when possible. ",Object(a.b)("a",o({parentName:"li"},{href:"https://mathiasbynens.be/notes/async-stack-traces"}),"Use await/async instead of Promises"),".")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-javascript"}),"// bad\nconst fetchAndDisplay = ({ url, element }) => {\n  showLoadingSpinner();\n  fetch(url)\n    .then((response) => response.text())\n    .then((text) => {\n      element.textContent = text;\n    })\n    .catch((error) => {\n      element.textContent = error.message;\n    })\n    .finally(() => {\n      hideLoadingSpinner();\n    });\n};\n\n// good\nconst fetchAndDisplay = async ({ url, element }) => {\n  showLoadingSpinner();\n  try {\n    const response = await fetch(url);\n    const text = await response.text();\n    element.textContent = text;\n  } catch (error) {\n    element.textContent = error.message;\n  } finally {\n    hideLoadingSpinner();\n  }\n};\n")),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"finally")," to avoid code duplication and to semantically\nseparate cleanup from the other parts."),Object(a.b)("p",null,"If you need to run the Promises in parallel, use ",Object(a.b)("inlineCode",{parentName:"p"},"Promise.all()")," (or ",Object(a.b)("inlineCode",{parentName:"p"},"Promise.race()"),")."),Object(a.b)("h3",{id:"form-guidelines"},"Form guidelines"),Object(a.b)("p",null,"Helsinki Design System offers two patterns that are related to form design and implementation. These patterns give general guidelines on how to build consistent, usable and accessible forms and how to utilise design system components for this. Form validation pattern also includes code examples in React using ",Object(a.b)("inlineCode",{parentName:"p"},"yup")," validation library and HDS form components. While dynamic validation is the recommended method, HDS also has a static method available when dynamic validation is not possible."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",o({parentName:"li"},{href:"https://hds.hel.fi/patterns/forms"}),"HDS Form guidelines")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",o({parentName:"li"},{href:"https://hds.hel.fi/patterns/form-validation"}),"HDS Form validation guidelines"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",o({parentName:"li"},{href:"https://hds.hel.fi/storybook/react/?path=/docs/patterns-form-validation--dynamic"}),"Dynamic validation (recommended) example")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",o({parentName:"li"},{href:"https://hds.hel.fi/storybook/react/?path=/docs/patterns-form-validation--static"}),"Static validation example")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",o({parentName:"li"},{href:"https://hds.hel.fi/storybook/react/?path=/docs/patterns-form-validation--hybrid"}),"Hybrid validation example"))))))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/best-practices/coding-standards.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-best-practices-coding-standards-md-bbaa143d11e25d23eef2.js.map