{"version":3,"sources":["webpack:///../docs/best-practices/testing-requirements.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,6NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,wBADR,wBAGA,sGAEA,8BACE,iBAAGC,WAAW,cAAd,mHAKF,iBAAQ,CACN,GAAM,gCADR,gCAGA,sBACE,kBAAIA,WAAW,MAAf,+EACC,kBAAIA,WAAW,MACZ,kBAAIA,WAAW,MAAf,wIAGJ,kBAAIA,WAAW,MAAf,0DAA+E,kBAAIA,WAAW,MAC1F,kBAAIA,WAAW,MAAf,yEAEJ,kBAAIA,WAAW,MAAf,oEAAyF,kBAAIA,WAAW,MACpG,kBAAIA,WAAW,MAAf,0FAGJ,kBAAIA,WAAW,MAAf,uHACwC,kBAAIA,WAAW,MACnD,kBAAIA,WAAW,MAAf,8GAIN,iBAAQ,CACN,GAAM,4BADR,4BAGA,sBACE,kBAAIA,WAAW,MAAf,+FACiB,kBAAIA,WAAW,MAC5B,kBAAIA,WAAW,MAAf,oGAGJ,kBAAIA,WAAW,MAAf,gGAEA,kBAAIA,WAAW,MAAf,sDAA2E,kBAAIA,WAAW,MACtF,kBAAIA,WAAW,MAAf,0CAGN,iBAAQ,CACN,GAAM,+BADR,+BAGA,sBACE,kBAAIA,WAAW,MAAf,sDAA2E,kBAAIA,WAAW,MACtF,kBAAIA,WAAW,MAAf,sFAEA,kBAAIA,WAAW,MAAf,oIAGJ,kBAAIA,WAAW,MAAf,0HAC+C,kBAAIA,WAAW,MAC1D,kBAAIA,WAAW,MAAf,oDACA,kBAAIA,WAAW,MAAf,kJAIJ,kBAAIA,WAAW,MAAf,gDAAqE,kBAAIA,WAAW,MAChF,kBAAIA,WAAW,MAAf,qLAGA,kBAAIA,WAAW,MAAf,0KAIJ,kBAAIA,WAAW,MAAf,mFACI,kBAAIA,WAAW,MACf,kBAAIA,WAAW,MAAf,iJAKN,iBAAQ,CACN,GAAM,qCADR,qCAGA,sBACE,kBAAIA,WAAW,MAAf,4GACmC,kBAAIA,WAAW,MAC9C,kBAAIA,WAAW,MAAf,kGAGJ,kBAAIA,WAAW,MAAf,uEAA4F,kBAAIA,WAAW,MACvG,kBAAIA,WAAW,MAAf,qKAIJ,kBAAIA,WAAW,MAAf,wEAA6F,kBAAIA,WAAW,MACxG,kBAAIA,WAAW,MAAf,kG,oNAQVJ,EAAWK,gBAAiB","file":"component---docs-best-practices-testing-requirements-md-cbf237f97fb25e1e2c27.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/bestpractice/bestpractice/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"testing-requirements\"\n    }}>{`Testing requirements`}</h1>\n    <p>{`... or, what kind of regression tests should City of Helsinki services\nhave?`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`well-tested program -\nadapting to every change -\nno surprises here!\n-- Panu Kalliokoski, programming haikus`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"tests-that-should-be-written\"\n    }}>{`Tests that should be written`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`integration tests that cover the happy paths of each feature and user\nstory`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`this means a program that does what the user would do (against a\nreal service) and checks that what happens is what should happen`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`integration or unit tests that cover forbidden behavior`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`a program that does what a hacker would do and checks that it fails`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`unit tests for every method/function whose logic is \"complicated\"`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`\"complicated\" means there are at least three execution paths in the\nmethod/function`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`integration or unit tests that provide full code coverage at least for\nall code that implements the running service`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`this is meant to exclude build-time helper scripts and similar\nstuff.  But consider testing them, too!`}</li>\n        </ul></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tests-that-would-be-nice\"\n    }}>{`Tests that would be nice`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`at least rudimentary performance tests: how long does it take to load\neach view 1000 times?`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`these produce an important time series where you can find when you\nmade a performance blunder`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`randomised fuzz testing to see that the service doesn't break (or\nreports errors correctly)`}</li>\n      <li parentName=\"ul\">{`state invariants if your data has interdependencies`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`these can be made on database level`}</li>\n        </ul></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"how-tests-should-be-written\"\n    }}>{`How tests should be written`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Prefer integration (and e2e) tests over unit tests.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use unit tests for stuff that is hard to understand even on a local\n(unit) level.`}</li>\n          <li parentName=\"ul\">{`Integration tests are good for covering a lot of stuff quickly.\nUnit tests are good for finding exactly where a problem is.  `}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Don't use mocks unless it simplifies tests considerably.  That is,\ndon't redo software components in a simplified way.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`instead, use the real components for tests, too.`}</li>\n          <li parentName=\"ul\">{`if the real component is really hard to use, then a mock (or fake\nversion) might be feasible.  Consider fixing the real component,\nthough.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Don't overtest or undertest.  (This is hard.)`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Undertesting means that broken things go unnoticed.  Write enough\ntests to cover all execution paths and test the results are right\nfrom the unit/service user's point of view.`}</li>\n          <li parentName=\"ul\">{`Overtesting means that change is hard because most of the time goes\ninto fixing tests.  In the test, don't check for details that are\nirrelevant and might change.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Use fixtures (such as prepopulated data in the database) if your tests\nneed it.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`However, don't make your tests depend very much on the detail of\ntesting data.  Testing data will inevitably have to be updated\nsomeday.`}</li>\n        </ul></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"how-to-write-easily-testable-code\"\n    }}>{`How to write easily testable code`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Build stateless services if you can.  Put state into specialised\nstateful services (buckets, databases).`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`This way, the state can always be initialised (by fixtures) so that\ntests work predictably.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Use stateless handlers (pure functions/components) wherever you can.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Model your program as functions that process input data into output\ndata.  Hoist all I/O and other interaction onto as high level in the\nprogram as possible.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`In UI programs, separate state handling from the rest of the program.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`You can test your reducers (state update functions) separately if\nthey are \"complicated\".`}</li>\n        </ul></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}